package bagopgave;import java.util.Arrays;public class ArrayBag<T> implements Bag<T> {    private T[] indhold;    private int currentSize;    public ArrayBag(int kapacitet) {        indhold = (T[]) new Object[kapacitet];        currentSize = 0;    }    @Override    public int getCurrentSize() {        return currentSize;    }    @Override    public boolean isFull() {        return currentSize == indhold.length;    }    @Override    public boolean isEmpty() {        return currentSize == 0;    }    @Override    public boolean add(T newEntry) {        if (!isFull()) {            indhold[currentSize] = newEntry;            currentSize++;            return true;        }        return false;    }    @Override    public T remove() {        if (isEmpty()) return null;        currentSize--;        T resultat = indhold[currentSize];        indhold[currentSize] = null;        return resultat;    }    @Override    public boolean remove(T anEntry) {        if (isEmpty()) return false;        if (!contains(anEntry)) {            return false;        }        for (int i = 0; i < currentSize; i++) {            if (indhold[i].equals(anEntry)) {                for (int j = i; j < currentSize - 1; j++) {                    indhold[j] = indhold[j + 1];                }                indhold[currentSize - 1] = null;                currentSize--;                return true;            }        }        return false;    }    @Override    public void clear() {        indhold = (T[]) new Object[indhold.length];        currentSize = 0;    }    @Override    public int getFrequencyOf(T anEntry) {        if (isEmpty()) return 0;        if (!contains(anEntry)) return 0;        int count = 0;        for (int i = 0; i < currentSize; i++) {            if (indhold[i].equals(anEntry)) {                count++;            }        }        return count;    }    @Override    public boolean contains(T anEntry) {        boolean found = false;        int i = 0;        while (!found && i < currentSize) {            if (indhold[i].equals(anEntry)) {                found = true;            }            i++;        }        return found;    }    @Override    public T[] toArray() {        return Arrays.copyOf(indhold, currentSize);    }}